package com.example.luyan.smartmenu_process.GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.luyan.smartmenu_process.MetaData.ORDERITEM;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDERITEM".
*/
public class ORDERITEMDao extends AbstractDao<ORDERITEM, Long> {

    public static final String TABLENAME = "ORDERITEM";

    /**
     * Properties of entity ORDERITEM.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrderId = new Property(0, Long.class, "orderId", true, "_id");
        public final static Property ClientType = new Property(1, Integer.class, "clientType", false, "CLIENT_TYPE");
        public final static Property OrderKey = new Property(2, String.class, "orderKey", false, "ORDER_KEY");
        public final static Property ShopId = new Property(3, Long.class, "shopId", false, "SHOP_ID");
        public final static Property NoticeType = new Property(4, Long.class, "noticeType", false, "NOTICE_TYPE");
        public final static Property DeskId = new Property(5, Long.class, "deskId", false, "DESK_ID");
        public final static Property DeskNum = new Property(6, String.class, "deskNum", false, "DESK_NUM");
        public final static Property OrderIsDealed = new Property(7, boolean.class, "orderIsDealed", false, "ORDER_IS_DEALED");
        public final static Property OrderIsPayed = new Property(8, boolean.class, "orderIsPayed", false, "ORDER_IS_PAYED");
        public final static Property OrderIsOrdered = new Property(9, boolean.class, "orderIsOrdered", false, "ORDER_IS_ORDERED");
        public final static Property OrderIsUsing = new Property(10, boolean.class, "orderIsUsing", false, "ORDER_IS_USING");
        public final static Property DateTime = new Property(11, String.class, "dateTime", false, "DATE_TIME");
        public final static Property OrderContent = new Property(12, String.class, "orderContent", false, "ORDER_CONTENT");
        public final static Property IsRead = new Property(13, boolean.class, "isRead", false, "IS_READ");
    }


    public ORDERITEMDao(DaoConfig config) {
        super(config);
    }
    
    public ORDERITEMDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDERITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: orderId
                "\"CLIENT_TYPE\" INTEGER," + // 1: clientType
                "\"ORDER_KEY\" TEXT," + // 2: orderKey
                "\"SHOP_ID\" INTEGER," + // 3: shopId
                "\"NOTICE_TYPE\" INTEGER," + // 4: noticeType
                "\"DESK_ID\" INTEGER," + // 5: deskId
                "\"DESK_NUM\" TEXT," + // 6: deskNum
                "\"ORDER_IS_DEALED\" INTEGER NOT NULL ," + // 7: orderIsDealed
                "\"ORDER_IS_PAYED\" INTEGER NOT NULL ," + // 8: orderIsPayed
                "\"ORDER_IS_ORDERED\" INTEGER NOT NULL ," + // 9: orderIsOrdered
                "\"ORDER_IS_USING\" INTEGER NOT NULL ," + // 10: orderIsUsing
                "\"DATE_TIME\" TEXT," + // 11: dateTime
                "\"ORDER_CONTENT\" TEXT," + // 12: orderContent
                "\"IS_READ\" INTEGER NOT NULL );"); // 13: isRead
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDERITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ORDERITEM entity) {
        stmt.clearBindings();
 
        Long orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(1, orderId);
        }
 
        Integer clientType = entity.getClientType();
        if (clientType != null) {
            stmt.bindLong(2, clientType);
        }
 
        String orderKey = entity.getOrderKey();
        if (orderKey != null) {
            stmt.bindString(3, orderKey);
        }
 
        Long shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindLong(4, shopId);
        }
 
        Long noticeType = entity.getNoticeType();
        if (noticeType != null) {
            stmt.bindLong(5, noticeType);
        }
 
        Long deskId = entity.getDeskId();
        if (deskId != null) {
            stmt.bindLong(6, deskId);
        }
 
        String deskNum = entity.getDeskNum();
        if (deskNum != null) {
            stmt.bindString(7, deskNum);
        }
        stmt.bindLong(8, entity.getOrderIsDealed() ? 1L: 0L);
        stmt.bindLong(9, entity.getOrderIsPayed() ? 1L: 0L);
        stmt.bindLong(10, entity.getOrderIsOrdered() ? 1L: 0L);
        stmt.bindLong(11, entity.getOrderIsUsing() ? 1L: 0L);
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(12, dateTime);
        }
 
        String orderContent = entity.getOrderContent();
        if (orderContent != null) {
            stmt.bindString(13, orderContent);
        }
        stmt.bindLong(14, entity.getIsRead() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ORDERITEM entity) {
        stmt.clearBindings();
 
        Long orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(1, orderId);
        }
 
        Integer clientType = entity.getClientType();
        if (clientType != null) {
            stmt.bindLong(2, clientType);
        }
 
        String orderKey = entity.getOrderKey();
        if (orderKey != null) {
            stmt.bindString(3, orderKey);
        }
 
        Long shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindLong(4, shopId);
        }
 
        Long noticeType = entity.getNoticeType();
        if (noticeType != null) {
            stmt.bindLong(5, noticeType);
        }
 
        Long deskId = entity.getDeskId();
        if (deskId != null) {
            stmt.bindLong(6, deskId);
        }
 
        String deskNum = entity.getDeskNum();
        if (deskNum != null) {
            stmt.bindString(7, deskNum);
        }
        stmt.bindLong(8, entity.getOrderIsDealed() ? 1L: 0L);
        stmt.bindLong(9, entity.getOrderIsPayed() ? 1L: 0L);
        stmt.bindLong(10, entity.getOrderIsOrdered() ? 1L: 0L);
        stmt.bindLong(11, entity.getOrderIsUsing() ? 1L: 0L);
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(12, dateTime);
        }
 
        String orderContent = entity.getOrderContent();
        if (orderContent != null) {
            stmt.bindString(13, orderContent);
        }
        stmt.bindLong(14, entity.getIsRead() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ORDERITEM readEntity(Cursor cursor, int offset) {
        ORDERITEM entity = new ORDERITEM( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // orderId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // clientType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderKey
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // shopId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // noticeType
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // deskId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // deskNum
            cursor.getShort(offset + 7) != 0, // orderIsDealed
            cursor.getShort(offset + 8) != 0, // orderIsPayed
            cursor.getShort(offset + 9) != 0, // orderIsOrdered
            cursor.getShort(offset + 10) != 0, // orderIsUsing
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // dateTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // orderContent
            cursor.getShort(offset + 13) != 0 // isRead
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ORDERITEM entity, int offset) {
        entity.setOrderId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClientType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setOrderKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShopId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setNoticeType(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setDeskId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setDeskNum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOrderIsDealed(cursor.getShort(offset + 7) != 0);
        entity.setOrderIsPayed(cursor.getShort(offset + 8) != 0);
        entity.setOrderIsOrdered(cursor.getShort(offset + 9) != 0);
        entity.setOrderIsUsing(cursor.getShort(offset + 10) != 0);
        entity.setDateTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOrderContent(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsRead(cursor.getShort(offset + 13) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ORDERITEM entity, long rowId) {
        entity.setOrderId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ORDERITEM entity) {
        if(entity != null) {
            return entity.getOrderId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ORDERITEM entity) {
        return entity.getOrderId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
